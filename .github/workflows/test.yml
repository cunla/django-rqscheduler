name: Django CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ '3.8', '3.9', '3.10' ]
        django-version: [ '3.2.13', '4.0.5' ]
        include:
          - python-version: '3.10'
            django-version: '4.0.5'
            coverage: yes
    outputs:
      version: ${{ steps.getVersion.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          cache-dependency-path: poetry.lock
      - name: Install poetry and dependencies
        shell: bash
        run: |
          python -m pip --quiet install poetry
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH
          poetry install
          poetry run pip install django==${{ matrix.django-version }}
      - name: Get version
        id: getVersion
        shell: bash
        run: |
          VERSION=$(poetry version -s --no-ansi -n)
          echo "::set-output name=VERSION::$VERSION"
      - name: Run Tests without coverage
        if: ${{ matrix.coverage != 'yes' }}
        run: |
          cd testproject
          poetry run python manage.py test scheduler
      # Steps for coverage check
      - name: Run tests with coverage
        uses: ./.github/actions/test-coverage
        if: ${{ matrix.coverage == 'yes' }}
        with:
          pythonVer: ${{ matrix.python-version }}
          djangoVer: ${{ matrix.django-version }}
          repoToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Create coverage badge
        if: ${{ matrix.coverage == 'yes' && github.event_name == 'push' }}
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: b756396efb895f0e34558c980f1ca0c7
          filename: django-rq-scheduler-4.json
          label: coverage
          message: ${{ env.COVERAGE }}%
          color: green
  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}
      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title "v${{ needs.build.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.version }}
          EOM
          )"
          echo "::notice title=New release::${{ needs.build.outputs.version }}"          
